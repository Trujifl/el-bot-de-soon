"""
M√≥dulo de Personalidad del Bot - SoonBot v9.4

Contiene:
1. Generaci√≥n de respuestas con estilo √∫nico
2. Sistema de frases contextuales
3. Manejo de emociones b√°sicas
"""

import random
from typing import Optional
from datetime import datetime
from src.config import BotPersonality, logger
from src.services.openai import generar_respuesta_ia

class Personalidad: 
    @staticmethod
    def generar_saludo(nombre: str) -> str:
        """Genera un saludo casual con el estilo del bot"""
        saludos = [
            f"¬°Epa {nombre}! ¬øC√≥mo anda, todo bien? üëä",
            f"¬°Buenaas {nombre}! ¬øEn qu√© te ayudo? üî•",
            f"¬°Buenas crack!!! Dime c√≥mo colaboramos hoy üíº",
            f"¬°Que pasaaa {nombre}! Listo para lo que necesites ‚ö°"
        ]
        return random.choice(saludos)

    @staticmethod
    def generar_despedida(nombre: str) -> str:
        """Genera una despedida con personalidad"""
        despedidas = [
            f"¬°Listo socio! Cualquier cosa me chiflas üëå",
            f"Nos vemos {nombre}, no te quedes ghosteando üëª",
            f"Hasta luego, ¬°que no se te caiga el exchange! üòé",
            f"Chao pescao, √©xito en esas inversiones üêü"
        ]
        return random.choice(despedidas)

    @staticmethod
    def generar_respuesta_positiva() -> str:
        """Respuestas para acciones exitosas"""
        frases = [
            "¬°Juega vivo! As√≠ me gusta üòè",
            "¬°Esooo Excelente! Apretaste el bot√≥n correcto ü§ô",
            "¬°Confirmado! M√°s r√°pido que transacci√≥n en Solana ‚ö°",
            "¬°Listo! M√°s f√°cil que minar con ASIC ‚úÖ"
        ]
        return random.choice(frases)

    @staticmethod
    def generar_respuesta_error(nombre: str) -> str:
        """Mensajes de error con estilo"""
        errores = [
            f"¬°Chale {nombre}! Algo se bugue√≥ üòÖ ¬øLe damos F5?",
            "Error 404 - Aqu√≠ no hay crypto... pero reintentemos üîÑ",
            "Se cay√≥ como LUNA... pero ya lo reseteamos üåï",
            "¬°Ups! Parece que me doxxearon... broma, reintenta üëÄ"
        ]
        return random.choice(errores)

    @staticmethod
    def generar_mensaje_espera() -> str:
        """Mensajes mientras se procesa algo"""
        mensajes = [
            "Tranqui, no es rugpull... procesando üïµÔ∏è",
            "Espera espera, como en ICO... cargando üìà",
            "M√°ndame un memecoin mientras esperas... trabajando üê∂",
            "M√°s r√°pido que Binance en ca√≠da... pero dame un toque ‚è≥"
        ]
        return random.choice(mensajes)

    @staticmethod
    def generar_respuesta_cripto(cripto: str, accion: str) -> Optional[str]:
        """Respuestas contextuales sobre criptomonedas"""
        cripto = cripto.lower()
        respuestas = {
            "bitcoin": [
                f"Ahhh el rey {cripto} üëë, dime qu√© necesitas saber",
                f"BTC, el oro digital üèÜ, ¬øqu√© te interesa?"
            ],
            "ethereum": [
                f"{cripto.capitalize()} y su mundo DeFi üè¶",
                f"ETH, el combustible de los smart contracts ‚õΩ"
            ],
            "inversion": [
                f"¬øPensando en invertir en {cripto}? üí∞ Te doy data:",
                f"Antes de comprar {cripto}, considera:"
            ],
            "general": [
                f"¬°{cripto.capitalize()} en el radar! üì°",
                f"Interesante lo de {cripto}, dime m√°s..."
            ]
        }
        
        if cripto in respuestas:
            return random.choice(respuestas[cripto])
        elif accion in respuestas:
            return random.choice(respuestas[accion])
        else:
            return random.choice(respuestas["general"])

    @staticmethod
    def generar_respuesta_temporal() -> str:
        """Respuestas que var√≠an seg√∫n hora del d√≠a"""
        hora = datetime.now().hour
        if 5 <= hora < 12:
            return "¬°Buenos d√≠as cryptoamigo! ‚òÄÔ∏è ¬øEn qu√© onda?"
        elif 12 <= hora < 19:
            return "¬°Buenas tardes! ¬øC√≥mo va el trading? üìä"
        else:
            return "¬°Buena noche! ¬øAnalizando charts? üåô"

    @staticmethod
    def responder(mensaje: str, nombre_usuario: str, contexto: str = None) -> str:
        """
        Sistema centralizado de respuestas.
        
        Par√°metros:
            mensaje: Texto del usuario
            nombre_usuario: Nombre para personalizar
            contexto: 'precio', 'inversion', etc.
        """
        mensaje = mensaje.lower()

    @staticmethod
    async def generar_respuesta_avanzada(mensaje: str, nombre_usuario: str, contexto: str = None) -> str:
        """Usa OpenAI para respuestas conversacionales avanzadas"""
        try:
            # 1. Primero intenta con respuestas predefinidas
            respuesta_predefinida = Personalidad.responder(mensaje, nombre_usuario, contexto)
            if "no entend√≠" not in respuesta_predefinida.lower():
                return respuesta_predefinida
            
            # 2. Si no hay respuesta predefinida adecuada, usa OpenAI
            respuesta_ia = await generar_respuesta_ia(
                mensaje=mensaje,
                contexto=contexto,
                nombre_usuario=nombre_usuario
            )
            return respuesta_ia or Personalidad.generar_respuesta_error(nombre_usuario)
            
        except Exception as e:
            logger.error(f"Error al generar respuesta: {e}")
            return Personalidad.generar_respuesta_error(nombre_usuario)
        
        